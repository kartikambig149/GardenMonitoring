#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>
#include <BluetoothSerial.h>
#include <WiFi.h>
#include <HTTPClient.h>

// Pin Definitions
#define MOISTURE_PIN 34
#define DHT_PIN 13
#define RELAY_PIN 32  // Relay for automatic watering (connected to GPIO 32)

// Sensor Setup
DHT dht(DHT_PIN, DHT11);  // DHT11 sensor
LiquidCrystal_I2C lcd(0x27, 16, 2); // LCD with I2C address 0x27

// Bluetooth Setup
BluetoothSerial SerialBT;

// Wi-Fi Credentials
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";

// Variables
int moistureLevel;
float humidity, temperature;
int moistureThreshold = 500;  // Set threshold for soil moisture (adjust as needed)

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  
  // Initialize Bluetooth
  SerialBT.begin("GardenMonitor"); // Bluetooth device name
  Serial.println("Bluetooth device is ready to pair.");
  
  // Initialize DHT and LCD
  dht.begin();
  lcd.begin();
  lcd.backlight();
  
  // Set Relay pin mode
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW); // Turn off the relay initially

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Show initial message on LCD
  lcd.setCursor(0, 0);
  lcd.print("Garden Monitor");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  // Read soil moisture level
  moistureLevel = analogRead(MOISTURE_PIN);
  
  // Read temperature and humidity from DHT sensor
  humidity = dht.readHumidity();
  temperature = dht.readTemperature();
  
  // Check if any sensor reading failed
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Display data on LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Moisture: ");
  lcd.print(moistureLevel);
  lcd.setCursor(0, 1);
  lcd.print("Temp: ");
  lcd.print(temperature);
  lcd.print("C");
  
  // Send data via Bluetooth to mobile app
  SerialBT.print("Moisture: ");
  SerialBT.print(moistureLevel);
  SerialBT.print(", Temp: ");
  SerialBT.print(temperature);
  SerialBT.print("C, Humidity: ");
  SerialBT.print(humidity);
  SerialBT.println("%");

  // Automatic watering based on soil moisture
  if (moistureLevel < moistureThreshold) {
    Serial.println("Soil is dry. Turning on the water pump...");
    digitalWrite(RELAY_PIN, HIGH);  // Turn on the relay (water pump)
    
    // Send push notification via IFTTT (example)
    sendPushNotification("Soil Moisture Low! Watering the garden...");
    
    // Wait for 5 seconds to simulate watering, then turn off the relay
    delay(5000);  
    digitalWrite(RELAY_PIN, LOW); // Turn off the relay (stop watering)
  } else {
    Serial.println("Soil moisture is adequate.");
  }

  // Delay before next reading
  delay(2000);
}

// Function to send push notification via IFTTT
void sendPushNotification(String message) {
  HTTPClient http;
  String url = "https://maker.ifttt.com/trigger/garden_alert/with/key/your_IFTTT_webhook_key";
  url += "?value1=" + message;

  http.begin(url);
  int httpResponseCode = http.GET();
  
  if (httpResponseCode > 0) {
    Serial.println("Push notification sent successfully");
  } else {
    Serial.println("Error sending push notification");
  }

  http.end();
}
